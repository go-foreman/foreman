// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-foreman/foreman/saga (interfaces: Saga)

// Package saga is a generated GoMock package.
package saga

import (
	reflect "reflect"

	scheme "github.com/go-foreman/foreman/runtime/scheme"
	saga "github.com/go-foreman/foreman/saga"
	gomock "github.com/golang/mock/gomock"
)

// MockSaga is a mock of Saga interface.
type MockSaga struct {
	ctrl     *gomock.Controller
	recorder *MockSagaMockRecorder
}

// MockSagaMockRecorder is the mock recorder for MockSaga.
type MockSagaMockRecorder struct {
	mock *MockSaga
}

// NewMockSaga creates a new mock instance.
func NewMockSaga(ctrl *gomock.Controller) *MockSaga {
	mock := &MockSaga{ctrl: ctrl}
	mock.recorder = &MockSagaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaga) EXPECT() *MockSagaMockRecorder {
	return m.recorder
}

// Compensate mocks base method.
func (m *MockSaga) Compensate(arg0 saga.SagaContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compensate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compensate indicates an expected call of Compensate.
func (mr *MockSagaMockRecorder) Compensate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compensate", reflect.TypeOf((*MockSaga)(nil).Compensate), arg0)
}

// EventHandlers mocks base method.
func (m *MockSaga) EventHandlers() map[scheme.GroupKind]saga.Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlers")
	ret0, _ := ret[0].(map[scheme.GroupKind]saga.Executor)
	return ret0
}

// EventHandlers indicates an expected call of EventHandlers.
func (mr *MockSagaMockRecorder) EventHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlers", reflect.TypeOf((*MockSaga)(nil).EventHandlers))
}

// GroupKind mocks base method.
func (m *MockSaga) GroupKind() scheme.GroupKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupKind")
	ret0, _ := ret[0].(scheme.GroupKind)
	return ret0
}

// GroupKind indicates an expected call of GroupKind.
func (mr *MockSagaMockRecorder) GroupKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupKind", reflect.TypeOf((*MockSaga)(nil).GroupKind))
}

// Init mocks base method.
func (m *MockSaga) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockSagaMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSaga)(nil).Init))
}

// Recover mocks base method.
func (m *MockSaga) Recover(arg0 saga.SagaContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockSagaMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockSaga)(nil).Recover), arg0)
}

// SetGroupKind mocks base method.
func (m *MockSaga) SetGroupKind(arg0 *scheme.GroupKind) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGroupKind", arg0)
}

// SetGroupKind indicates an expected call of SetGroupKind.
func (mr *MockSagaMockRecorder) SetGroupKind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupKind", reflect.TypeOf((*MockSaga)(nil).SetGroupKind), arg0)
}

// SetSchema mocks base method.
func (m *MockSaga) SetSchema(arg0 scheme.KnownTypesRegistry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSchema", arg0)
}

// SetSchema indicates an expected call of SetSchema.
func (mr *MockSagaMockRecorder) SetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockSaga)(nil).SetSchema), arg0)
}

// Start mocks base method.
func (m *MockSaga) Start(arg0 saga.SagaContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSagaMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSaga)(nil).Start), arg0)
}
