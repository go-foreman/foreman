// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-foreman/foreman/pubsub/transport (interfaces: IncomingPkg)

// Package transport is a generated GoMock package.
package transport

import (
	reflect "reflect"
	time "time"

	transport "github.com/go-foreman/foreman/pubsub/transport"
	gomock "github.com/golang/mock/gomock"
)

// MockIncomingPkg is a mock of IncomingPkg interface.
type MockIncomingPkg struct {
	ctrl     *gomock.Controller
	recorder *MockIncomingPkgMockRecorder
}

// MockIncomingPkgMockRecorder is the mock recorder for MockIncomingPkg.
type MockIncomingPkgMockRecorder struct {
	mock *MockIncomingPkg
}

// NewMockIncomingPkg creates a new mock instance.
func NewMockIncomingPkg(ctrl *gomock.Controller) *MockIncomingPkg {
	mock := &MockIncomingPkg{ctrl: ctrl}
	mock.recorder = &MockIncomingPkgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncomingPkg) EXPECT() *MockIncomingPkgMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockIncomingPkg) Ack(arg0 ...transport.AcknowledgmentOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockIncomingPkgMockRecorder) Ack(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockIncomingPkg)(nil).Ack), arg0...)
}

// Headers mocks base method.
func (m *MockIncomingPkg) Headers() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockIncomingPkgMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockIncomingPkg)(nil).Headers))
}

// Nack mocks base method.
func (m *MockIncomingPkg) Nack(arg0 ...transport.AcknowledgmentOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nack", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockIncomingPkgMockRecorder) Nack(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockIncomingPkg)(nil).Nack), arg0...)
}

// Origin mocks base method.
func (m *MockIncomingPkg) Origin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origin")
	ret0, _ := ret[0].(string)
	return ret0
}

// Origin indicates an expected call of Origin.
func (mr *MockIncomingPkgMockRecorder) Origin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origin", reflect.TypeOf((*MockIncomingPkg)(nil).Origin))
}

// Payload mocks base method.
func (m *MockIncomingPkg) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockIncomingPkgMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockIncomingPkg)(nil).Payload))
}

// PublishedAt mocks base method.
func (m *MockIncomingPkg) PublishedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// PublishedAt indicates an expected call of PublishedAt.
func (mr *MockIncomingPkgMockRecorder) PublishedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishedAt", reflect.TypeOf((*MockIncomingPkg)(nil).PublishedAt))
}

// ReceivedAt mocks base method.
func (m *MockIncomingPkg) ReceivedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ReceivedAt indicates an expected call of ReceivedAt.
func (mr *MockIncomingPkgMockRecorder) ReceivedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedAt", reflect.TypeOf((*MockIncomingPkg)(nil).ReceivedAt))
}

// Reject mocks base method.
func (m *MockIncomingPkg) Reject(arg0 ...transport.AcknowledgmentOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockIncomingPkgMockRecorder) Reject(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockIncomingPkg)(nil).Reject), arg0...)
}

// UID mocks base method.
func (m *MockIncomingPkg) UID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UID indicates an expected call of UID.
func (mr *MockIncomingPkgMockRecorder) UID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UID", reflect.TypeOf((*MockIncomingPkg)(nil).UID))
}
