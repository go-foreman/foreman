// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-foreman/foreman/pubsub/endpoint (interfaces: Router)

// Package endpoint is a generated GoMock package.
package endpoint

import (
	reflect "reflect"

	endpoint "github.com/go-foreman/foreman/pubsub/endpoint"
	message "github.com/go-foreman/foreman/pubsub/message"
	gomock "github.com/golang/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// RegisterEndpoint mocks base method.
func (m *MockRouter) RegisterEndpoint(arg0 endpoint.Endpoint, arg1 ...message.Object) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterEndpoint", varargs...)
}

// RegisterEndpoint indicates an expected call of RegisterEndpoint.
func (mr *MockRouterMockRecorder) RegisterEndpoint(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEndpoint", reflect.TypeOf((*MockRouter)(nil).RegisterEndpoint), varargs...)
}

// Route mocks base method.
func (m *MockRouter) Route(arg0 message.Object) []endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route", arg0)
	ret0, _ := ret[0].([]endpoint.Endpoint)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockRouterMockRecorder) Route(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouter)(nil).Route), arg0)
}
