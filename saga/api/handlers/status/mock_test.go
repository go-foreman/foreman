// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-foreman/foreman/saga/api/handlers/status (interfaces: StatusService)

// Package status is a generated GoMock package.
package status

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetFilteredBy mocks base method.
func (m *MockStatusService) GetFilteredBy(arg0 context.Context, arg1 *Filters, arg2 *Pagination) (*SagaBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredBy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*SagaBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredBy indicates an expected call of GetFilteredBy.
func (mr *MockStatusServiceMockRecorder) GetFilteredBy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredBy", reflect.TypeOf((*MockStatusService)(nil).GetFilteredBy), arg0, arg1, arg2)
}

// GetStatus mocks base method.
func (m *MockStatusService) GetStatus(arg0 context.Context, arg1 string) (*SagaStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*SagaStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockStatusServiceMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStatusService)(nil).GetStatus), arg0, arg1)
}
